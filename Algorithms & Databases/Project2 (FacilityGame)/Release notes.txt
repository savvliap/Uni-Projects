
FacilityGame, 04/2010

FacilityGame: A simple game for the problem "Competitive Facility Location" 
of the book "Algorithm Design", Kleinberg and Tardos.
This specific implementation applies to very simple graphs: a simple path. 

Instructions:
To create your own player create a class as a descendant of class FPlayer
and use it in the server or in the client.
Declare a player type in EnumPlayerType, define a class inheriting the FPlayer class,
and create an object of your player in the switch statement in CreatePlayerObject.

Each player has access to the FacilityGame object through the interface FacilityGameAPI.
A player can also call whoAmI() to find out its identity (EnumPlayer.PLAYER_A or EnumPlayer.PLAYER_B).

Playing a game:
Start the FServer and then the FClient. 

Hint: 
The game can be played with local players or remotely, over the Internet.
For remote play you may need to configure the NAT and/or Firewall of
the server PC to admit incoming connections on the listening port
and the client PC to admit outgoing connections to the server. 

Release Notes

v0.94,
  - FServer supports SWITCHING games (for games between two student players)
  - FacilityGame: checkServerParameters (executed only at the server side), checkParameters (executed both by the server and the client)  
   
v0.92b, Σωτήρης

v0.92a, 2018-11-18 (Παύλος)
  - New Player Types: FPLAYER_INSTRUCTOR_01 to 06
  - Player Instructor01 solves the 2018-19 Exercise

v0.92, 2018-11-14 (Σωτήρης)
  - New game type: Switching
  facility game where player B has to select a move that is not within 3 blocks distance from his last move
  
v0.89a, 2016-12-12
  - Invalid player moves: Minor changes (to handle the case when the specified location is -1) in printAllMoves() and processMove() of the FacilityGame class 
  
v0.89
  - SimplePlayer2 and SimplePlayer3 both online (Σωτήρης)
  
v0.88, 2016-11-20
  -  NOTRIPLES game type (Σωτήρης)
  
v0.86, 2016-02-23
  - Champions of 2015-16 integrated
  - MultipleGames feature (Server)
  
v0.84, 2015-11-22
  - FPLAYER_SIMPLE_3 completed
  - FPLAYER_COMPLIMENT completed
  
v0.83, 2014-11-14
  - FPLAYER_201415 included
  - FPLAYER_SIMPLE_3 defined ...
  - FPLAYER_COMPLEMENT defined ...

v0.82, 2014-11-21
  - FacilityGame.printAllMoves(): prints the node values too
  - MonitorThread improvements 
  
v0.81, 2014-11-16
  - FacilityGameServer: Bug fix in checkSuccess()
  - Server and Client version are stored in the DB logs
   
v0.81, 2014-11-14
  - FClient: More log information
  - FacilityGameServer: success (1:true, 0:false) is shown to the client
  
v0.80, 2014-11-08
  - All player names start with FPlayer
  - All player types start with FPLAYER
  - EnumGameType implemented (NORMAL, COPY)
  	new game type: COPY Player B has to follow player A. Player A must be the server. 
  - Exception handling expanded ... 
  - Bug fixes
  - Vectors 
     private Vector<EnumPlayer> moveByPlayer;
	 private Vector<Integer> moveLocation;
	in class FacilityGame are now initialized with size 0 and new items are appended with the add() method.
  - Server: Database handling improved

v0.72, 2014-10-24
  - Bug fix: handling unexpected player type
  - tables: students, erg1logs 
  
v0.70, 2014-10-19
  - PlayerType: FPLAYER_201314, Winner of 2013-14
  - PlayerType: FPLAYER_TEST, Implemented on the Server for Test Purposes
  
v0.64, 2014-10-16
  - Parameters: localhost:3306 50 true
  
v0.62, 2013-11-16
  - Fixed bug in SIMPLE_PLAYER_2
  - Example of "me" and "opponent" in MyFPlayer1
  
v0.60, 2013-11-09
  - Client can choose who will be player A and who player B
  Player A plays first
  Player B plays second
  
v0.52, 2013-11-07
  - SimplePlayer2: Start from a random node, chooses a random direction, and then selects the first free node in each round
  
v0.50, 2013-10-07
  - me, opponent (EnumFacilityStatus added to class FPlayer)

v0.48, 2013-10-07
  - whoIsMyOpponent() in FPlayer
  
v0.46, 2012-12-02
  - optional initialize() method for each player:
  		public void initialize(FacilityGameAPI game) {
		 	// initialization code
		}
  - minor corrections 
  
v0.45, 2012-11-23
  - AFM, first name, last name: for each player
   
v0.44, 2012-02-12 (is compatible with 0.42)
  - A monitor thread has been added. The monitor automatically prints two types of messages:
    -- Monitor Info: The current round number. Printed every approx. every Finals.MSEC_FOR_INFO_MESSAGE msec 
    -- Monitor Warning: Warnings when the player is blocked/waiting for longer than Finals.MSEC_WAITING msec 
    -- SlowFPlayer: Used to check the program behavior when a player takes a long time to respond
   
v0.42, 2012-02-06
  - FacilityGameAPI: Methods to read node values have been added
  - Examples of using the FacilityGameAPI methods are given in player MyFPlayer1

v0.40, 2012-02-03
  - FacilityGameAPI for FPlayer
  - Bonus for occupying consecutive nodes
  - CreatePlayerObject for creating player objects
  
v0.26, 2012-01-26
  - The history of all moves is automatically stored within the game 
  
v0.24, 2010-05-09:
  - Player type parameter
  - verbose option

v0.22, 2010-05-02:
  - Version info
  - Method for printing the game status
  - All constants are defined in the class Finals
  - More information is printed for each round of the game
  - Exception handling of some of the exceptions of the socket operations
  - Bug of the status array size fixed
   
v0.2, 2010-04-29: The game works